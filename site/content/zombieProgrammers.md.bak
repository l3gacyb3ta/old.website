---
title: "Zombie Programmers and Mr. Barthes"
permalink: "/zombieProgrammers"
---
# Zombie Programmers and Mr. Barthes

## Books dont change, code does. Does this make programmers some sort of zombie author (or even _auteur_)? Let's seeeeeeeeeeeeee~

> ## Wait what even is a dead author, I didn't kill anyone!?!

So, for this whole thing to work, I'm gonna have to introduce you to Mr. Barthes.
![A dashing image of Mr. Barthes himself](static/mrBarthes.png)
Roland Barthes was 20th century french literary theorist, someone who talks about how books _work_.
One of his most major contributions to his field was that of "The Death of The Author"
(French: "La mort de l'auteur"). This concept proposes that once a work has been written, the
author can be considered "dead" for the purpose of critique and examination, because the text remains
the same, no matter what the author does next. 

> ### Dude if you think about it, we're _all_ authors. wooooah.
Another point of his is that every time a text is read, the reader "rewrites" it in their own head
with the current cultural context. For example, a french peasant in the 18th century would have read
a text about the king way differently than, for example, the king himself (not that he would be reading with those eyes much longer).
Now some (meeee) would argue that this includes what the author of the text has done since the orginal writing (* cough J.K. Rowling cough *),
but for the purpose of this post, we're going to stick with Rolly's original idea.

> ## Why is code not a book? They both suck to write.

Now, most (normal) people apply this concept to the arts, but I'm not most people. (yes I am seeing a therapist)

&lt;tangent&gt;  
> ### Wait what even is art
When people think of "the arts", they usually think of things like film, music, litterature, theater, that are generally considered entertainment. 
But art can be so much more! For example, architecture is a form of art, and that, while it can be entertaining to the right kind of person, is mostly useful.
Another form of art is tool making! Like, if I put time and effort into making a nice looking and functional hammer, that's a piece of art, for ~~whacking people~~ hitting nails.  
&lt;/tangent&gt;  

Now because of this, code falls into an interesting place. Usually it isn't static, like a hammer or a painting or a book are. It is dynamic, it runs, it updates, it gets pushed and pulled and forked and merged, so can we even consider the author "dead"?

> ## And who wrote that code 
Introducing: Zombie programmers! They're here finally.  

In the case of code and it's authors "mortality", it can be effectivly summarized as undead. This means that when looking at code, we have to consider the author far more than we would
with, say a movie. A piece of code is ever-changing, like us, the undead authors. This puts our community in an interesting place, in that they have to deal with using software with undead misogynists.

### Undead mysogynists TW: sexual assault, child abuse, general terribleness

Soooooo why did I write this. I had recently been made aware of the _many_ accusations of terrible and unforgiveable things levied against an importaint member of the open source and free software world, Richard M. Stallman.
Mr. Stallman has publicly defended child abuse, and has made unwanted sexual advances on women over whom he had a position of power.
I, as a male-passing person, do not have any sort of context for this sort of abuse, and am urging you all to [read](https://selamjie.medium.com/remove-richard-stallman-fec6ec210794) [more](https://thenewstack.io/why-almost-everyone-wants-richard-stallman-cancelled/) from people 100x more qualified to talk about than I am.

The reason I bring RMS up is that he has been a core member of the FSF and the GNU project for many decades, and becuase of the undead nature of code, we can't just dissmiss his involvemnt as inconsiquental.
I am currently writing this on a laptop running GNU/Linux with code licensed under the GPL, and I feel as though us, the free and open software community _must_ talk more about the people who write our software.

## Dang, that got heavy.

In the end, this is less of a discussion of code analysis and litterary theory and more a call to action for accountability in the open source community. Please go out and make an amazing place just that much better by getting rid of these stupid people who hold us back.
I have also attached some basic resources for further reading on this. Thanks for sticking around y'all!

## Resources:
- [Fight Racism in Open Source](https://cucumber.io/blog/open-source/tackling-structural-racism-(and-sexism)-in-open-so/)
- [Fight Sexism in Open Source](https://www.computerweekly.com/blog/Open-Source-Insider/How-to-keep-sexism-out-of-open-source)
